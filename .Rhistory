m <<- NULL
}
get <- function() x
setmean <- function(solve) m <<- solve
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
Temp<-makeCacheMatrix(matric(1:4, nrow=2, ncol=2))
Temp$get()
?list
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
debugSource('C:/Users/Andy/DataSciencecoursera/ProgrammingAssignment2/cachematrix.R')
Temp<-makeCacheMatrix(matric(1:4, nrow=2, ncol=2))
Temp$get()
Temp<-makeCacheMatrix(matrix(1:4, nrow=2, ncol=2))
n
Temp$get()
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$solve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$solve(m)
m
}
a<-cacheSolve(Temp)
debugSource('C:/Users/Andy/DataSciencecoursera/ProgrammingAssignment2/cachematrix.R')
debugSource('C:/Users/Andy/DataSciencecoursera/ProgrammingAssignment2/cachematrix.R')
a<-cacheSolve(Temp)
debugSource('C:/Users/Andy/DataSciencecoursera/ProgrammingAssignment2/cachematrix.R')
a<-cacheSolve(Temp)
m
debugSource('C:/Users/Andy/DataSciencecoursera/ProgrammingAssignment2/cachematrix.R')
a<-cacheSolve(Temp)
?solve
a<-matrix(1:4, nrow=2, ncol=2)
a
b<-solve(a)
b
getwd
library(XML)
fileURL<-'C:\\Data Science\\3 - Getting and Cleaning Data\\Week 1\\getdata-data-restaurants.xml'
doc<-xmltreeParse(fileURL, useInternal=TRUE)
doc<-xmlTreeParse(fileURL, useInternal=TRUE)
rootNode<-xmlRoot(doc)
rootNode
xmlNames(doc)
xmlName(doc)
doc<-xmlTreeParse(fileURL, useInternal=TRUE)
rootNode<-xmlRoot(doc)
xmlName(doc)
rootNode <- xmlRoot(doc)
rootNode
class(rootNode)
names(rootNode)
names(rootNode[[1]])
names(rootNode[[1]][[1]])
Zip = rootNode[[1]][["zipcode"]]
Zip
names(rootNode[[1]][[1]])
names(Zip)
zip = rootNode[[1]][["zipcode"]]
names(rootNode[[1]][[1]])
doc
a<-getNodeSet(doc,"//Response/row[@zipcode='21231']")
a
a<-getNodeSet(doc,"//Response/row/row[@zipcode='21231']")
a
a<-getNodeSet(doc,"//row[@zipcode='21231']")
a<-getNodeSet(doc,"//response/row[@zipcode='21231']")
doc[[1]]
#Get the column headers File
CHFile="./Data/UCI HAR Dataset/features.txt"
#Read the Column Headers 2nd column will contain the Columnnames
ColumnHeaders<-read.csv(CHFile, header=FALSE, sep=" ")
#Add 2 new row to the Column Headers for Test Subject and Activity
NewRow<-data.frame(V1=1, V2="TestSubjectId")
NewRow2<-data.frame(V1=1, V2="ActivityDesc")
ColumnHeaders<- rbind(NewRow, NewRow2, ColumnHeaders)
#Create a matrix with the same number of records in the ColumHeader File
temprow <- matrix(c(rep.int(NA,nrow(ColumnHeaders))),nrow=1,ncol=nrow(ColumnHeaders))
#convert the Matric to a DF
ColumnNames <- data.frame(temprow)
#Set the Columnnames to the VAlues from the File
colnames(ColumnNames)<-ColumnHeaders$V2
#Clean up teh memory
rm(NewRow)
rm(NewRow2)
rm(ColumnHeaders)
rm(temprow)
rm(CHFile)
#load the Test File
TrainTestSubjects<-read.table("./data/UCI HAR Dataset/train/subject_train.txt", header=FALSE)
TrainActivity<-read.table("./data/UCI HAR Dataset/train/y_train.txt", header=FALSE)
TrainData<-read.table("./data/UCI HAR Dataset/train/X_train.txt", header=FALSE)
TestTestSubjects<-read.table("./data/UCI HAR Dataset/test/subject_test.txt", header=FALSE)
TestActivity<-read.table("./data/UCI HAR Dataset/test/y_test.txt", header=FALSE)
TestData<-read.table("./data/UCI HAR Dataset/test/X_test.txt", header=FALSE)
#Get the Data set to classify the activity by name
Activity<-read.table("./data/UCI HAR Dataset/activity_labels.txt", header=FALSE)
#Merge the Activity with the Desc
TrainActivity<-merge(TrainActivity, Activity, by.x="V1", by.y="V1", all=TRUE)
TestActivity<-merge(TestActivity, Activity, by.x="V1", by.y="V1", all=TRUE)
#Cbind the Test Subjects and Activitys to the test and Traing DF
TrainData<-cbind( TrainTestSubjects, TrainActivity$V2, TrainData)
TestData<-cbind( TestTestSubjects, TestActivity$V2, TestData)
#Set the Names to the the Same
names(TrainData) <- names(ColumnNames)
names(TestData) <- names(ColumnNames)
#Combine all into a single data set
AllData<-rbind(TestData, TrainData)
#clean up the memory
rm(TestData)
rm(TrainData)
rm(ColumnNames)
rm(TestActivity)
rm(TestTestSubjects)
rm(TrainActivity)
rm(TrainTestSubjects)
#Get all the columns we need for the final data Set
FinalData<-AllData[ , grep( "-mean\\(\\)|std|TestSubjectId|ActivityDesc" , names(AllData) ) ]
#Get the column headers File
CHFile="./Data/UCI HAR Dataset/features.txt"
#Read the Column Headers 2nd column will contain the Columnnames
ColumnHeaders<-read.csv(CHFile, header=FALSE, sep=" ")
#Add 2 new row to the Column Headers for Test Subject and Activity
NewRow<-data.frame(V1=1, V2="TestSubjectId")
NewRow2<-data.frame(V1=1, V2="ActivityDesc")
ColumnHeaders<- rbind(NewRow, NewRow2, ColumnHeaders)
#Create a matrix with the same number of records in the ColumHeader File
temprow <- matrix(c(rep.int(NA,nrow(ColumnHeaders))),nrow=1,ncol=nrow(ColumnHeaders))
#convert the Matric to a DF
ColumnNames <- data.frame(temprow)
#Set the Columnnames to the VAlues from the File
colnames(ColumnNames)<-ColumnHeaders$V2
#Clean up teh memory
rm(NewRow)
rm(NewRow2)
rm(ColumnHeaders)
rm(temprow)
rm(CHFile)
#Get the column headers File
CHFile="./Data/UCI HAR Dataset/features.txt"
#Read the Column Headers 2nd column will contain the Columnnames
ColumnHeaders<-read.csv(CHFile, header=FALSE, sep=" ")
#Add 2 new row to the Column Headers for Test Subject and Activity
NewRow<-data.frame(V1=1, V2="TestSubjectId")
NewRow2<-data.frame(V1=1, V2="ActivityDesc")
ColumnHeaders<- rbind(NewRow, NewRow2, ColumnHeaders)
#Create a matrix with the same number of records in the ColumHeader File
temprow <- matrix(c(rep.int(NA,nrow(ColumnHeaders))),nrow=1,ncol=nrow(ColumnHeaders))
#convert the Matric to a DF
ColumnNames <- data.frame(temprow)
#Set the Columnnames to the VAlues from the File
colnames(ColumnNames)<-ColumnHeaders$V2
#Get the column headers File
CHFile="./Data/UCI HAR Dataset/features.txt"
#Read the Column Headers 2nd column will contain the Columnnames
ColumnHeaders<-read.csv(CHFile, header=FALSE, sep=" ")
source('~/.active-rstudio-document')
getwd()
run_analysis("c:\\Data Science\\3 - Getting and Cleaning Data\\Project\\Data\\UCI HAR Dataset")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
run_analysis("c:\\Data Science\\3 - Getting and Cleaning Data\\Project\\Data\\UCI HAR Dataset")
run_analysis("c:\\Data Science\\3 - Getting and Cleaning Data\\Project\\Data")
source('~/.active-rstudio-document')
source('C:/Data Science/3 - Getting and Cleaning Data/Project/Getting-and-Cleaning-Data/run_analysis.R')
source('~/.active-rstudio-document')
source('C:/Data Science/3 - Getting and Cleaning Data/Project/Getting-and-Cleaning-Data/run_analysis.R')
run_analysis("c:\\Data Science\\3 - Getting and Cleaning Data\\Project\\Data")
install.package("reshape2")
install.packages("reshape2")
library("reshape2")
run_analysis("c:\\Data Science\\3 - Getting and Cleaning Data\\Project\\Data")
TidyDataFile<-paste(directory,"\\AvgHumanActivity.txt", sep="")
source('C:/Data Science/3 - Getting and Cleaning Data/Project/Getting-and-Cleaning-Data/run_analysis.R')
run_analysis("c:\\Data Science\\3 - Getting and Cleaning Data\\Project\\Data")
TidyData
directory<-"c:\\Data Science\\3 - Getting and Cleaning Data\\Project\\Data"
#Get the column headers File
CHFile<-paste(directory,"\\UCI HAR Dataset\\","features.txt", sep="")
#=directory"features.txt"
#file<-paste(directory,"\\",Filename,".csv", sep="")
#Read the Column Headers 2nd column will contain the Columnnames
ColumnHeaders<-read.csv(CHFile, header=FALSE, sep=" ")
#Add 2 new row to the Column Headers for Test Subject and Activity
NewRow<-data.frame(V1=1, V2="TestSubjectId")
NewRow1<-data.frame(V1=1, V2="ActivityID")
NewRow2<-data.frame(V1=1, V2="ActivityDesc")
ColumnHeaders<- rbind(NewRow1, NewRow, ColumnHeaders, NewRow2)
#Create a matrix with the same number of records in the ColumHeader File
temprow <- matrix(c(rep.int(NA,nrow(ColumnHeaders))),nrow=1,ncol=nrow(ColumnHeaders))
#convert the Matric to a DF
ColumnNames <- data.frame(temprow)
#Set the Columnnames to the VAlues from the File
colnames(ColumnNames)<-ColumnHeaders$V2
#Clean up teh memory
rm(NewRow)
rm(NewRow1)
rm(NewRow2)
rm(ColumnHeaders)
rm(temprow)
rm(CHFile)
#Set teh File names for each file
TestSubjectsFile<-paste(directory,"\\UCI HAR Dataset\\test\\subject_test.txt", sep="")
TrainSubjectsFile<-paste(directory,"\\UCI HAR Dataset\\train\\subject_train.txt", sep="")
TrainDataFile<-paste(directory,"\\UCI HAR Dataset\\train\\X_train.txt", sep="")
TestDataFile<-paste(directory,"\\UCI HAR Dataset\\test\\X_test.txt", sep="")
TrainActivityFile<-paste(directory,"\\UCI HAR Dataset\\train\\y_train.txt", sep="")
TestActivityFile<-paste(directory,"\\UCI HAR Dataset\\test\\y_test.txt", sep="")
#load the Test File
TrainTestSubjects<-read.table(TrainSubjectsFile, header=FALSE)
TrainActivity<-read.table(TrainActivityFile, header=FALSE)
TrainData<-read.table(TrainDataFile, header=FALSE)
TestTestSubjects<-read.table(TestSubjectsFile, header=FALSE)
TestActivity<-read.table(TestActivityFile, header=FALSE)
TestData<-read.table(TestDataFile, header=FALSE)
#Rename the Activity and TestSubject Columns
colnames(TrainTestSubjects)<-c("TestSubjectID")
colnames(TestTestSubjects)<-c("TestSubjectID")
colnames(TrainActivity)<-c("ActivityID")
colnames(TestActivity)<-c("ActivityID")
#Get the Data set to classify the activity by name
ActLabelsFile<-paste(directory,"\\UCI HAR Dataset\\activity_labels.txt", sep="")
Activity<-read.table(ActLabelsFile, header=FALSE)
#Cbind the Test Subjects and Activitys to the test and Traing DF
TrainData<-cbind( TrainTestSubjects, TrainActivity, TrainData)
TestData<-cbind( TestTestSubjects, TestActivity, TestData)
#Merge the Activity with the Desc
TrainData<-merge(TrainData, Activity, by.x="ActivityID", by.y="V1", all=TRUE, sort=FALSE)
TestData<-merge(TestData, Activity, by.x="ActivityID", by.y="V1", all=TRUE, sort=FALSE)
#Set the Names to the the Same
names(TrainData) <- names(ColumnNames)
names(TestData) <- names(ColumnNames)
#Combine all into a single data set
AllData<-rbind(TestData, TrainData)
#clean up the memory
rm(TestData)
rm(TrainData)
rm(ColumnNames)
rm(TestActivity)
rm(TestTestSubjects)
rm(TrainActivity)
rm(TrainTestSubjects)
rm(Activity)
#Get all the columns we need for the final data Set
FinalData<-AllData[ , grep( "-mean\\(\\)|std|TestSubjectId|ActivityDesc" , names(AllData) ) ]
CleanDataFile<-paste(directory,"\\HumanActivity.txt", sep="")
write.table(FinalData, file=CleanDataFile, col.names=TRUE, row.names = FALSE, sep = " ")
#Get the Measure Names
ColNames<-colnames(AllData[ , grep( "-mean\\(\\)|std" , names(AllData) ) ])
#Melt the data to prepare it for Casting
x<-melt(FinalData, id=c("TestSubjectId", "ActivityDesc"), measure.vars=ColNames)
#Get the Avg
TidyData<-dcast(x, TestSubjectId + ActivityDesc ~ variable, mean)
#Clean up the Column Names
names(TidyData) <- gsub("mean", "Mean", names(TidyData)) # capitalize M
names(TidyData) <- gsub("std", "Std", names(TidyData)) # capitalize S
names(TidyData) <- gsub("tBody", "Avg_tBody", names(TidyData)) # Add Avg in the front
names(TidyData) <- gsub("tGravity", "Avg_tGravity", names(TidyData)) # Add Avg in the front
names(TidyData) <- gsub("fGravity", "Avg_Gravity", names(TidyData)) # Add Avg in the front
names(TidyData) <- gsub("fBody", "Avg_fBody", names(TidyData)) # Add Avg in the front
#Write the TidayDate set out
TidyDataFile<-paste(directory,"\\AvgHumanActivity.txt", sep="")
write.table(TidyData, file=TidyDataFile, col.names=TRUE, row.names = FALSE, sep = "", quote= FALSE)
str(tidyData)
str(TidyData)
fileURL <- "https://github.com/aisley/RepData_PeerAssessment2/blob/master/Data/repdata-data-StormData.csv.bz2"
SourceFile <- "repdata-data-StormData.csv.bz2"
fileDir <- "Data"
#Check if Data Dir exists adn create if not
if(!file.exists(fileDir)) {
dir.create(fileDir)
}
#Get the Data dir to place the files
DataFileDir <- paste(getwd(), fileDir, sep="/")
fileURL <- "https://github.com/aisley/RepData_PeerAssessment2/blob/master/Data/repdata-data-StormData.csv.bz2"
SourceFile <- "repdata-data-StormData.csv.bz2"
fileDir <- "Data"
#Check if Data Dir exists adn create if not
if(!file.exists(fileDir)) {
dir.create(fileDir)
}
#Get the Data dir to place the files
DataFileDir <- paste(getwd(), fileDir, sep="/")
zipFile <- paste(getwd(), SourceFile, sep="/")
if(!file.exists(zipFile))
{
download.file(fileURL, destfile=SourceFile)
}
if(!file.exists(zipFile)) {
DataFileDir <- "ERR"
} else {
unzip(zipFile,  exdir = DataFileDir)
}
if(!file.exists(zipFile)) {
DataFileDir <- "ERR"
} else {
unzip(zipFile,  exdir = DataFileDir)
}
fileURL <- "https://github.com/aisley/RepData_PeerAssessment2/blob/master/Data/repdata-data-StormData.csv.bz2"
SourceFile <- "repdata-data-StormData.csv"
fileDir <- "Data"
#Check if Data Dir exists adn create if not
if(!file.exists(fileDir)) {
dir.create(fileDir)
}
#Get the Data dir to place the files
DataFileDir <- paste(getwd(), fileDir, sep="/")
zipFile <- paste(getwd(), SourceFile, sep="/")
if(!file.exists(zipFile))
{
download.file(fileURL, destfile=SourceFile)
}
if(!file.exists(zipFile)) {
DataFileDir <- "ERR"
} else {
unzip(zipFile,  exdir = DataFileDir)
}
zipFile
DataFileDir
fileURL <- "https://github.com/aisley/RepData_PeerAssessment2/blob/master/Data/repdata-data-StormData.csv.bz2"
SourceFile <- "repdata-data-StormData.csv.bz2"
fileDir <- "Data"
#Check if Data Dir exists adn create if not
if(!file.exists(fileDir)) {
dir.create(fileDir)
}
#Get the Data dir to place the files
DataFileDir <- paste(getwd(), fileDir, sep="/")
zipFile <- paste(getwd(), SourceFile, sep="/")
if(!file.exists(zipFile))
{
download.file(fileURL, destfile=SourceFile)
}
getwd()
setWD("C:\Users\Andy\SkyDrive\Documents\RPrograming\RepData_PeerAssessment2")
setWD("C:\\Users\\Andy\\SkyDrive\\Documents\\RPrograming\\RepData_PeerAssessment2")
setwd("C:\\Users\\Andy\\SkyDrive\\Documents\\RPrograming\\RepData_PeerAssessment2")
#Check to see if file was downloaded
if(!file.exists(zipFile)) {
DataFileDir <- "ERR"
} else {
#unzip(zipFile,  exdir = DataFileDir)
# dataFile <- paste(getwd(), "data/Activity.csv", sep="/")
activity <- read.csv(zipFile, header=TRUE, sep=",")
}
str(activity)
activity <- read.csv(zipFile)
zipFile
destfile
zipFile
fileURL <- "https://github.com/aisley/RepData_PeerAssessment2/blob/master/Data/repdata-data-StormData.csv.bz2"
SourceFile <- "repdata-data-StormData.csv.bz2"
fileDir <- "Data"
#Check if Data Dir exists adn create if not
if(!file.exists(fileDir)) {
dir.create(fileDir)
}
DataFileDir <- paste(getwd(), fileDir, sep="/")
DataFileDir
SourceFile
zipFile <- paste(getwd(), SourceFile, sep="/")
zipFile
fileURL <- "https://github.com/aisley/RepData_PeerAssessment2/blob/master/Data/repdata-data-StormData.csv.bz2"
SourceFile <- "data/repdata-data-StormData.csv.bz2"
fileDir <- "Data"
#Check if Data Dir exists adn create if not
if(!file.exists(fileDir)) {
dir.create(fileDir)
}
#Get the Data dir to place the files
DataFileDir <- paste(getwd(), fileDir, sep="/")
zipFile <- paste(getwd(), SourceFile, sep="/")
#Get the Data dir to place the files
DataFileDir
zipFile
f(!file.exists(zipFile))
{
download.file(fileURL, destfile=SourceFile)
}
SourceFile
zipFile
if(!file.exists(zipFile))
{
download.file(fileURL, destfile=SourceFile)
}
zipFile
if(!file.exists(zipFile)) {
DataFileDir <- "ERR"
} else {
#unzip(zipFile,  exdir = DataFileDir)
#dataFile <- paste(getwd(), "data/Activity.csv", sep="/")
activity <- read.csv(zipFile)
}
zipFile
str(activity)
fileURL <- "https://github.com/aisley/RepData_PeerAssessment2/blob/master/Data/repdata-data-StormData.csv.bz2"
SourceFile <- "repdata-data-StormData.csv.bz2"
fileDir <- "Data"
#Check if Data Dir exists adn create if not
if(!file.exists(fileDir)) {
dir.create(fileDir)
}
#Get the Data dir to place the files
DataFileDir <- paste(getwd(), fileDir, sep="/")
zipFile <- paste(getwd(), SourceFile, sep="/")
fileURL <- "https://github.com/aisley/RepData_PeerAssessment2/blob/master/Data/repdata-data-StormData.csv.bz2"
SourceFile <- "repdata-data-StormData.csv.bz2"
fileDir <- "Data"
#Check if Data Dir exists adn create if not
if(!file.exists(fileDir)) {
dir.create(fileDir)
}
#Get the Data dir to place the files
DataFileDir <- paste(getwd(), fileDir, sep="/")
zipFile <- paste(getwd(), SourceFile, sep="/")
if(!file.exists(zipFile))
{
download.file(fileURL, destfile=SourceFile)
}
fileURL <- "https://github.com/aisley/RepData_PeerAssessment2/blob/master/Data/repdata-data-StormData.csv.bz2"
SourceFile <- "repdata-data-StormData.csv.bz2"
fileDir <- "Data"
#Check if Data Dir exists adn create if not
if(!file.exists(fileDir)) {
dir.create(fileDir)
}
#Get the Data dir to place the files
DataFileDir <- paste(getwd(), fileDir, sep="/")
zipFile <- paste(getwd(), SourceFile, sep="/")
zipFile <- paste(DataFileDir, SourceFile, sep="/")
if(!file.exists(zipFile))
{
download.file(fileURL, destfile=SourceFile)
}
zipFile
NOAAStoreDataRaw <- read.csv(zipFile)
fileURL <- "https://github.com/aisley/RepData_PeerAssessment2/blob/master/Data/repdata-data-StormData.csv.bz2"
SourceFile <- "repdata-data-StormData.csv.bz2"
fileDir <- "Data"
#Check if Data Dir exists adn create if not
if(!file.exists(fileDir)) {
dir.create(fileDir)
}
#Get the Data dir to place the files
DataFileDir <- paste(getwd(), fileDir, sep="/")
zipFile <- paste(DataFileDir, SourceFile, sep="/")
if(!file.exists(zipFile))
{
download.file(fileURL, destfile=SourceFile)
}
else
{
NOAAStormDataRaw <- read.csv(zipFile)
}
zipFile <- paste(DataFileDir, SourceFile, sep="/")
if(!file.exists(zipFile))
{
download.file(fileURL, destfile=SourceFile)
}
else
{
NOAAStormDataRaw <- read.csv(zipFile)
}
if(!file.exists(zipFile))
{
download.file(fileURL, destfile=SourceFile)
} else {
NOAAStormDataRaw <- read.csv(zipFile)
}
NOAAStormDataRaw <- read.csv(zipFile)
fileURL <- "https://github.com/aisley/RepData_PeerAssessment2/blob/master/Data/repdata-data-StormData.csv.bz2"
SourceFile <- "repdata-data-StormData.csv.bz2"
fileDir <- "Data"
#Check if Data Dir exists adn create if not
if(!file.exists(fileDir)) {
dir.create(fileDir)
}
#Get the Data dir to place the files
DataFileDir <- paste(getwd(), fileDir, sep="/")
zipFile <- paste(DataFileDir, SourceFile, sep="/")
if(!file.exists(zipFile))
{
download.file(fileURL, destfile=SourceFile)
} else {
NOAAStormDataRaw <- read.csv(zipFile)
}
str(NOAAStormDataRaw)
str(NOAAStormDataRaw)
head(activity)
head(NOAAStormDataRaw)
